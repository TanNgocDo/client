// @flow
import type {TypedState, TypedActions} from '../util/container'

declare export class Engine {
  dispatchWaitingAction: (key: string, waiting: boolean) => void;
  reset(): void;
  cancelRPC(): void;
  cancelSession(sessionID: any): void;
  rpc(): void;
  setFailOnError(): void;
  actionOnConnect(key: string, f: () => ?TypedActions): void;
  actionOnDisconnect(key: string, f: () => ?TypedActions): void;
  hasEverConnected(): void;
  setIncomingActionCreators(
    method: string,
    actionCreator: ({
      param: Object,
      state: TypedState,
      response: ?Object,
    }) => null | false | void | TypedActions | Array<TypedActions | null | false | void>
  ): void;
  createSession({incomingCallMap?: any, waitingKey?: string, cancelHandler?: any, dangling?: boolean}): any;
  _rpcOutgoing({
    method: string,
    params: ?Object,
    callback: (...args: Array<any>) => void,
    waitingKey?: string,
  }): void;
}

declare export function getEngine(): Engine
declare export function makeEngine(any, any): Engine
export default getEngine
